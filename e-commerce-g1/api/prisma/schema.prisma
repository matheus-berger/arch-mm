// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*  --->  MODELAGEM DE ENTIDADES  <---  */

model Product {
  id String @id @default(uuid())
  name String
  price Decimal
  stock Int

  orderProducts OrderProduct[] // Relação: Um produto pode estar em várias linhas de pedido
}

model Order {
  id String @id @default(uuid())
  total_value Decimal
  date DateTime @default(now())
  
  userId String
  user User @relation(fields: [userId], references: [id]) // Relação: Um Order pode ter um User (cliente)
  
  statusId Int
  status OrderStatus @relation(fields: [statusId], references: [id]) // Relação: Um Order pode ter um OrderStatus

  // Relação: Um Order pode ter varios OrderPayment
  orderPayments OrderPayment[]

  // Relação: Um pedido pode ter várias linhas de produto
  orderProducts OrderProduct[] 

}

model OrderProduct {
  id String @id @default(uuid())
  quantity Int
  unit_value Decimal
  total_value Decimal

  // --- Chaves estrangeiras e Relações
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  
  productId String
  product Product @relation(fields: [productId], references: [id])

}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  is_deleted Boolean @default(false)

  orders Order[] // Relação: Um User pode ter varios Order

}

model OrderStatus {
  id Int @id @default(autoincrement())
  name String @unique

  orders Order[] // Relação: Um order pode ter (ou estar presente em) varios Orders 

}

model PaymentType {
  id Int @id @default(autoincrement())
  name String @unique

  // Relação: Um PaymentType pode estar associado a varios OrderPayment
  orderPayments OrderPayment[]

}

model OrderPayment {
  id String @id @default(uuid())
  
  // Relação: Um OrderPayment pertece a apenas um Order
  orderId String
  order Order @relation(fields: [orderId], references: [id])

  // Relação: Um OrderPayment pode ter um PaymentType
  typePaymentId Int
  paymentType PaymentType @relation(fields: [typePaymentId], references: [id])

  total Decimal

}
